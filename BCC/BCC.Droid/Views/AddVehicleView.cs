using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using MvvmCross.Droid.Views;
using MvvmCross.Droid.Support.V7.AppCompat;
using BCC.Core.ViewModels;
using MvvmCross.Plugins.Messenger;
using MvvmCross.Platform;

namespace BCC.Droid.Views
{
    [Activity(Label = "Add Vehicle Profiles", NoHistory = true)]
    public class AddVehicleView : MvxAppCompatActivity<AddVehiclesViewModel>
    {
        private MvxSubscriptionToken _token;

        /// <summary>
        /// Use OnViewModelSet to inflate the view's ContentView from AXML.
        /// </summary>
        protected override void OnViewModelSet()
        {
            // This uses a resource identifier generated by Android to identify the view.
            SetContentView(Resource.Layout.AddVehicle);

            //Setting up the layout for the toolbar 
            var toolbar = FindViewById<Android.Support.V7.Widget.Toolbar>(Resource.Id.toolbar);
            SetSupportActionBar(toolbar);
            SupportActionBar.Title = "Add Profile";
            SupportActionBar.SetDisplayHomeAsUpEnabled(true);
            SupportActionBar.SetHomeButtonEnabled(true);
            SupportActionBar.SetDisplayShowHomeEnabled(true);
            SupportActionBar.SetHomeAsUpIndicator(Resource.Drawable.back);

            _token = Mvx.Resolve<IMvxMessenger>().Subscribe<ViewModelCommunication>(OnUpdateMessage);

            CheckIntents();
        }
        /// <summary>
        /// This detects if any of the buttons in the toolbar have been pressed
        /// </summary>
        /// <param name="item">the item that was pressed</param>
        /// <returns></returns>
        public override bool OnOptionsItemSelected(IMenuItem item)
        {
            switch (item.ItemId)
            {
                case Android.Resource.Id.Home:
                    Mvx.Resolve<IMvxMessenger>().Publish(new ViewModelCommunication(this, "reload"));
                    Finish();
                    return true;

                default:
                    return base.OnOptionsItemSelected(item);
            }
        }
        /// <summary>
        /// Displays an error when notified and the string matches 
        /// </summary>
        /// <param name="locationMessage">the notified message</param>
        private void OnUpdateMessage(ViewModelCommunication locationMessage)
        {
            if (locationMessage.Msg == "contains")
                Toast.MakeText(this, "vehicle already exists", ToastLength.Short).Show();
            if (locationMessage.Msg == "string")
                Toast.MakeText(this, "height must be a number", ToastLength.Short).Show();
        }

        private void CheckIntents()
        {
            string vName = Intent.GetStringExtra("vName");
            string vRegNo = Intent.GetStringExtra("vRegNo");
            string vHeight = Intent.GetStringExtra("vHeight");

            if (vName != null && vRegNo != null && vHeight != null)
            {
                EditText pNameTxt = FindViewById<EditText>(Resource.Id.profileName);
                EditText vNameTxt = FindViewById<EditText>(Resource.Id.vehicleName);
                EditText vRegNoTxt = FindViewById<EditText>(Resource.Id.regNumber);
                EditText vHeightTxt = FindViewById<EditText>(Resource.Id.vehicleHeight);

                pNameTxt.Text = vName;
                vNameTxt.Text = vName;
                vRegNoTxt.Text = vRegNo;
                vHeightTxt.Text = vHeight;
            } 
        }
    }
}
